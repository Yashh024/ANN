import numpy as np

# Define the Neural Network class
class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size

        # Initialize random weights
        self.weights1 = np.random.randn(self.input_size, self.hidden_size)
        self.weights2 = np.random.randn(self.hidden_size, self.output_size)

        # Initialize random biases
        self.bias1 = np.random.randn(1, self.hidden_size)
        self.bias2 = np.random.randn(1, self.output_size)

    # Sigmoid activation function
    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    # Feedforward propagation
    def forward(self, X):
        self.hidden_layer = self.sigmoid(np.dot(X, self.weights1) + self.bias1)
        self.output_layer = self.sigmoid(np.dot(self.hidden_layer, self.weights2) + self.bias2)
        return self.output_layer

    # Backpropagation
    def backward(self, X, y, output, learning_rate):
        error = y - output

        # Calculate gradients
        output_delta = error * output * (1 - output)
        hidden_layer_error = np.dot(output_delta, self.weights2.T)
        hidden_layer_delta = hidden_layer_error * self.hidden_layer * (1 - self.hidden_layer)

        # Update weights and biases
        self.weights2 += np.dot(self.hidden_layer.T, output_delta) * learning_rate
        self.weights1 += np.dot(X.T, hidden_layer_delta) * learning_rate
        self.bias2 += np.sum(output_delta, axis=0) * learning_rate
        self.bias1 += np.sum(hidden_layer_delta, axis=0) * learning_rate

    # Train the neural network
    def train(self, X, y, epochs, learning_rate):
        for epoch in range(epochs):
            output = self.forward(X)
            self.backward(X, y, output, learning_rate)

    # Make predictions
    def predict(self, X):
        output = self.forward(X)
        return np.round(output)

# XOR dataset
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y = np.array([[0], [1], [1], [0]])

# Create a neural network with 2 input neurons, 4 hidden neurons, and 1 output neuron
nn = NeuralNetwork(2, 4, 1)

# Train the neural network
nn.train(X, y, epochs=10000, learning_rate=0.1)

# Test the trained network
test_input = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
predictions = nn.predict(test_input)
print("Predictions:")
print(predictions)